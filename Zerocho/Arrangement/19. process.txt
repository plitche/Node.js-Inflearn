* process
	- 현재 실행중인 노드 프로세스에 대한 정보를 담고 있음
	- 컴퓨터마다 출력값이 다를 수 있음
	- node > process
	
	process.version 		// 설치된 노드의 버전
	process.arch 			// 프로세스 아키텍처 정보
	process.platform 		// 운영체제 플랫폼 정보
	process.pid				// 현재 프로세스 아이디. 프로세스를 여러 개 가질 때 구분 가능
	process.uptime() 		// 프로세스가 실작된 후 흐른 시간. 단위는 초
	process.exePath 		// 노드의 경로
	process.cwd() 			// 현재 프로세스가 실행되는 위치
	process.cpuUsage() 		// 현재 cpu 사용량
	
* process.env
	- 시스템 환경 변수들이 들어있는 객체
	- 비밀키(데이터베이스 베밀번호, 서드파티 앱 키 등)를 보관하는 용도로 쓰임
	- 환경 변수는 process.env로 접근 가능
		const secretId = process.env.SECRET_ID;
		const secretCode = process.env.SECRET_CODE;
		
	- 일부 환경 변수는 노드 실행 시 영향을 미침
	- 예시) NODE_OPTIONS(노드 실행 옵션), UV_THREADPOOL_SIZE(스레드풀 개수)
		NODE_OPTIONS=--max-old-space-size=8192
		UV_THREADPOOL_SIZE=8
		
* process.nextTick(콜백)
	- 이벤트 루프가 다른 콜백 함수들보다 nextTick의 콜백 함수를 우선적으로 처리함
	- 너무 남용하면 다른 콜백 함수들 실행이 늦어짐
	- 비슷한 경우로 promise가 있음
	
	setImmediate(() => {
		console.log('immediate');
	})
	process.nextTick(() => {
		console.log('nextTick');
	})
	setTimeout(() => {
		console.log('timeout');
	}, 0);
	Promise.resolve().then(() => console.log('promise'));
	
	// nextTick > promise > timeout > immediate
	=> setImmediate, setTimeout보다 promise와 nextTick이 먼저 실행됨
	=> 우선순위가 있는 함수들끼리는 순서가 지켜짐
	
* process.exit(코드)
	- 현재의 프로세스를 멈춤
	- 코드가 없거나 0이면 정상 종료
	- 이외의 코드는 비정상 종료를 의미함