* CREATE
	- 몽고디비는 컬럼을 정의하지 않아도 됨
		> 자유로움이 장점, 무엇이 들어올지 모른다는 단점
		> 자바스크립트의 자료형을 따름(차이점도 존재)
		> ObjectId: 몽고디비의 자료형으로 고유 아이디 역할을 함
		> save method로 저장
		
		mongo
		> user nodejs;
		> db.users.save({ name: 'zero', age: 24, married: false, comment: '안녕하세요. zero', createdAt: new Date() });
		> db.users.save({ name: 'nero', age: 32, married: true, comment: '안녕하세요. nero', createdAt: new Date() });
		
	- 컬렉션 간 관계를 강요하는 제한이 없으므로 직접 ObjectId를 넣어 연결
		> 사용자의 ObjectId를 찾은 뒤 댓글 컬렉션에 넣음
		db.users.find({name: 'zero'}, {_id: 1})
		
* READ
	- find로 조회, findOne으로 하나만 조회
		> db.users.find({}}
		> db.comments.find({})
		
	- 두 번째 인수로 조회할 필드를 선택할 수 있음(1은 추가, 0은 제외)
		> db.users.find({}, {_id: 0}, {name: 1}, {married: 1})
		
	- 첫 번째 인수로 조회 조건 입력 가능
		> $gt나 $or같은 조건 연산자 사용 
		> db.users.find({age : {$gt:30}, married: true}, {_id: 0, name: 1, age: 1})
		
	- 정렬은 sort 메서드로 함
		> db.users.find({}, {_id: 0}, {name: 1}, {married: 1}).sort({age: -1})
	
	- limit 메서드로 조회할 다큐먼트 개수 제한
		> db.users.find({}, {_id: 0}, {name: 1}, {married: 1}).sort({age: -1}).limit(1)
	
	- skip 메서드로 건너뛸 다큐먼트 개수 제공
		> db.users.find({}, {_id: 0}, {name: 1}, {married: 1}).sort({age: -1}).limit(1).skip(1)
		
* UPDATE
	- update 메서드로 쿼리
		> 첫 번째 인수로 수정 대상을, 두 번째 인수로 수정 내용을 제공
		> $set을 붙이지 않으면 다큐먼트 전체가 대체되므로 주의
		
		> db.users.update({name: 'nero'}, {$set: {comment: '안녕하세요. 이 필드를 바꿔보겠습니다!'}})
		
	- 결과로 수정된 개수가 나옴
	
* DELETE
	- remove 메서드로 쿼리
		> 첫 번째 인수로 삭제할 대상 조건 제공
		> db.users.remove({name: 'nero'})
		
	- 결과로 수정된 개수가 나옴