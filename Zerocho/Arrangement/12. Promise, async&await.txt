* 프로미스
	- 콜백 헬이라고 불리는 지저분한 자바스크립트 코드의 해결책
		> 프로미스: 내용이 실행은 되었지만 결과를 아직 반환하지 않은 객체
		> Then을 붙이면 결과를 반환함
		> 실행이 완료되지 않았으면 완료된 후에 Then 내부 함수가 실행됨
		
		> Resolve(성공리턴값): then으로 연결
		> Reject(실패리턴값): catch로 연결
		> Finally 부분은 무조건 실행됨
		
	const condition = true;
	const promise = new Promise((resolve, reject) => {
		if (condition) {
			resolve('성공');
		} else {
			reject('실패')
		}
	})
	
	promise
		.then((message) => {
			console.log(message);
		})
		.catch((error) => {
			console.log(error);
		})
		.finally
		
	- 콜백 패턴(3중첩)을 프로미스로 바꾸는 예제
	function findAndSaveUser(Users) {
		Users.findOne({})
			.then((user) => {
				user.name = 'zero';
				return user.save();
			})
			.then((user) => {
				return Users.findOne({gender: 'm'});
			})
			.then((user) => {
				// 생략
			})
			.catch(err => {
				console.log(err)
			})
	}
 
	- Promise.all(배열): 여러 개의 프로미스를 동시에 실행
		> 하나라도 실패하면 catch로 감
		> allSettled로 실패한 것만 추려낼 수 있음
		
	- Async/await으로 한번 더 축약 가능
		> 변수 = await 프로미스; 인 경우 프로미스가 resolve된 값이 변수에 저장
		> 변수 await 값; 인 경우 그 값이 변수에 저장
		
		async function findAndSaveUser(Users) {
			let user = await Users.findOne({});
			user.name = 'zero';
			user = await user.save();
			user = await Users.findOne({ gender: 'm'})'
			// 생략
		}
 