* 쿠키의 필요성
	- 요청에는 한 가지 단점이 있음
		> 누가 요청을 보냈는지 모름(IP 주소와 브라우저 정보 정도만 앎)
		> 로그인을 구현하면 됨
		> 쿠키와 세션이 필요
	
	- 쿠키: 키=값의 쌍
		> name=zerocho
		> 매 요청마다 서버에 동봉해서 보냄
		> 서버는 쿠키를 읽어 누구인지 파악

* 쿠키 서버 만들기
	- 쿠키 넣는 것을 직접 구현
		> writeHead: 요청 헤더에 입력하는 메서드
		> Set-Cookie: 브라우저에게 쿠키를 설정하라고 명령
		
	- 쿠키: 키=값의 쌍
		> name=zerocho
		> 매 요청마다 서버에 동봉해서 보냄
		
	const http = require('http')

	http.createServer((req, res) => {
		console.log(req.url, req.headers.cookie)
		res.writeHead(200, { 'Set-Cookie': 'mycookie=test'})
		res.end("Hello Cookie")
	})
	.listen(8083, () => {
		console.log('8083번 포트에서 서버 대기 중 입니다!')
	})
	
* 쿠키로 나를 식별하기
	- 쿠키에 내 정보를 입력
		> parseCookies: 쿠키 문자열을 객체로 변환
		> 주소가 /login인 경우와 /인 경우로 나뉨
		> login인 경우 쿼리스트링으로 온이름을 쿠키로 저장
		> 그외의 경우 쿠키가 있는지 없는 지 판단
			: 있으면 환영 인사
			: 없으면 로그인 페이지로 리다이렉트
			
* 쿠키 옵션
	- Set-Cookie시 다양한 옵션이 있음
		> 쿠키명=쿠키값: 기본적인 쿠키의 값입니다.
		> Expires=날짜: 만료 기한입니다. 이 기간이 지나면 쿠키가 제거됩니다. 기본값은 클라이언트가 종료될 때 까지입니다.
		> Max-age=초: Expires와 비슷하지만 날짜 대신 초를 입력할 수 있습니다. Expires보다 우선합니다.
		> Domain=도메인명: 쿠키가 전송될 도메인을 특정할 수 있습니다. 기본값은 현재 도메인입니다.
		> Path:URL: 쿠키가 전송될 ULR을 특정할수 있습니다. 기본값은 "/" 입니다.
		> Secure: : HTTPS일 경우에만 쿠키가 전송됩니다.
		> HttpOnly: 설정시 자바스크립트에서 쿠키에 접근할 수 없습니다.