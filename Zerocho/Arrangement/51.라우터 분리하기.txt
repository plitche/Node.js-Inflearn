* express.Router
	- app.js가 길어지는 것을 막을 수 있음
		> userReouter의 get은 /user와 /가 합쳐져서 GET /user/가 됨
		
* 라우트 매개변수
	- :id를 넣으면 req.params.id로 받을 수 있음
		> 동적으로 변하는 부분을 라우트 매개변수로 만듦
		
		router.get('/user/:id', function(req, res) {
			console.log(req.params, req.qurey)
		})
		
		> 일반 라우터보다 뒤에 위치해야함
		
		router.get('/user/:id, function(req, res) {
			console.log('얘만 실행됩니다.')
		})
		router.get('/user/like, function(req, res) {
			console.log('전혀 실행되지 않습니다.')
		})
		
* 404 미들웨어
	- 요청과 일치하는 라우터가 없는 경우를 대비해 404 라우터를 만들기 
		
	app.use(req, res, next) => {
		res.status(404).send('Not Found')
	})
	
	- 이게 없으면 단순히 Cannot GET 주소라는 문자열이 표시됨
	
* 라우터 그룹화하기
	- 주소는 같지만 메서드가 다른 코드가 있을 때
		router.get('/abc', (req, res) => {
			res.send('GET /abc');
		})
		
		router.post('/abc', (req, res) => {
			res.send('POST /abc');
		})
		
	- router.route로 묶음
		router.route('/abc')
			.get((req, res) => {
				res.send('GET /abc');
			})
			.post((req, res) => {
				res.send('POST /abc');
			})
		

* req
	req.app : req.객체를 통해 app 객체에 접근할 수 있습니다. req.app.get('port')와 같다
	req.body : body-parser 미들웨어가 만드는 요청의 본문을 해석한 객체
	req.cookies: cookie-parser 미들웨어가 만드는 요청의 쿠키를 해석한 객체
	req.ip: 요청의 ip주소가 담겨 있다.
	req.params: 라우트 매개변수에 대한 정보가 담긴 객체
	req.query: 쿼리스트링에 대한 정보가 담긴 객체
	req.signedCookies: 서명된 쿠키들은 req.cookies 대신 여기에 담겨 있다.
	req.get(헤더 이름): 헤더의 값을 가져오고 싶을 때 사용하는 메서드

* res
	res.app : req.app처럼 res 객체를 통해 app 객체에 접근할 수 있습니다.
	res.cookie(키, 값, 옵션) : 쿠키를 설정하는 메서드
	res.clearCookie(키, 값, 옵션): 쿠키를 제거하는 메서드
	res.end() : 데이터 없이 응답을 보낸다.
	res.json(JSON): JSON 형식의 응답을 보낸다.
	res.redirect(주소) : 리다이렉트할 주소와 함꼐 응답을 보낸다.
	res.render(뷰, 데이터): 다음 절에서 다룰 템플릿 엔진을 랜더링해서 응답할 때 사용하는 메서드
	res.send(데이터): 데이터와 함꼐 응답을 보낸다. 데이터는 문자열일수도 있고 HTML일수도 있으며, 버퍼나 객체, 배열일 수 도 있다.
	res.sendFile(경로): 경로에 위치한 파일을 응답한다.
	res.set(헤더, 값) : 응답의 헤더를 설정한다.
	res.status(코드): 응답시의 HTTP 상태 코드를 지정한다.
	
	
	
	
